swagger: '2.0'
info:
  title: Shop Example API
  version: "0.1"
  description: Simple example API
consumes:
  - application/json
produces:
  - application/json
basePath: "/api"
paths:
  /pay/cart_pay:
    post:
      tags: [ Transaction ]
      operationId: app.cart_pay
      summary: pay from cart exported function
      parameters:
        - $ref: '#/parameters/amount_body'
      responses:
        200:
          description: return transaction json
        400:
          description: bad request
  /pay/rent_pay:
    post:
      tags: [ Transaction ]
      operationId: app.rent_pay
      summary: pay for renting product exported function
      parameters:
        - $ref: '#/parameters/amount_body'
      responses:
        200:
          description: return transaction json
        400:
          description: bad request
  /pay/parking_pay:
    post:
      tags: [ Transaction ]
      operationId: app.parking_pay
      summary: pay for parking exported function
      parameters:
        - $ref: '#/parameters/amount_body'
      responses:
        200:
          description: return transaction json
        400:
          description: bad request
  /transactions:
    get:
      tags: [ Transaction ]
      operationId: app.find_all_transactions
      summary: Get all Transactions
      responses:
        200:
          description: return transaction json array
        404:
          description: Does not exist
    post:
      tags: [ Transaction ]
      operationId: app.save_transaction
      summary: save new Transactions
      parameters:
        - $ref: '#/parameters/t_body'
      responses:
        200:
          description: return status
        409:
          description: Already exists
  /transactions/user/{user_id}:
    get:
      tags: [ Transaction ]
      operationId: app.find_user_transactions
      summary: Get All transactions from user id
      parameters:
        - $ref: '#/parameters/user_id'
      responses:
        200:
          description: return transactions
        404:
          description: Does not exist
  /transactions/{transaction_id}:
    get:
      tags: [ Transaction ]
      operationId: app.transaction_details
      summary: return Transaction details exported function
      parameters:
        - $ref: '#/parameters/transaction_id'
      responses:
        200:
          description: return transaction object
        404:
          description: Does not exist
  /transactions/edit/{transaction_id}:
    put:
      tags: [ Transaction ]
      operationId: app.edit_transaction
      summary: Edit transaction
      parameters:
        - $ref: '#/parameters/transaction_id'
        - $ref: '#/parameters/transaction_body'
      responses:
        200:
          description: Return transaction object
        404:
          description: Transaction does not exist
  /transactions/cart_payment_status/{transaction_id}:
    get:
      tags: [ Transaction ]
      operationId: app.cart_payment_status
      summary: returs is the Transaction for buying products is completed exported function
      parameters:
        - $ref: '#/parameters/transaction_id'
      responses:
        200:
          description: return true of false
        404:
          description: does not exist
  /transactions/rent_payment_status/{transaction_id}:
    get:
      tags: [ Transaction ]
      operationId: app.rent_payment_status
      summary: returs is the Transaction for rented products completed exported function
      parameters:
        - $ref: '#/parameters/transaction_id'
      responses:
        200:
          description: return true of false
        404:
          description: does not exist

  /user-payment-methods/user/{user_id}:
    get:
      tags: [ UserPayments ]
      operationId: app.find_all_user_payment_methods
      summary: list all payments methods
      parameters:
        - $ref: '#/parameters/user_id'
      responses:
        200:
          description: Return all user payments methods
        404:
          description: Does not exist
    post:
      tags: [ UserPayments ]
      operationId: app.save_user_payment_method
      summary: add new payment method for user
      parameters:
        - $ref: '#/parameters/p_body'
        - $ref: '#/parameters/user_id'
      responses:
        200:
          description: Return user payment
        409:
          description: Already exists
        404:
          description: Does not exist

  /user-payment-method/{method_id}:
    get:
      tags: [UserPayments]
      operationId: app.find_user_payment_method_by_id
      summary: find payment method by user id
      parameters:
        - $ref: '#/parameters/method_id'
      responses:
        200:
          description: Return user Payment Method
        404:
          description: Does not exist
    delete:
      tags: [UserPayments]
      operationId: app.delete_user_payment_method
      summary: delete user payment method
      parameters:
        - $ref: '#/parameters/method_id'
      responses:
        200:
          description: Return deleted User Payment Method
        404:
          description: Does not exist
  /hello/{name}:
    post:
      operationId: app.hello_world
      summary: Greeting
      description: Generates a greeting message.
      responses:
        200:
          description: OK
      parameters:
          - name: name
            in: path
            type: string
            description: Name of the person to greet.
            required: true
parameters:
  user_id:
    name: user_id
    description: User unique identification
    in: path
    type: integer
    required: true
  transaction_id:
    name: transaction_id
    description: Transaction unique identification
    in: path
    type: integer
    required: true
  amount_body:
    name: amount
    description: amount for paying
    in: body
    schema:
      required:
        - amount
      properties:
        amount:
          type: number
  method_id:
    name: method_id
    description: Method unique identifier
    in: path
    type: integer
    required: true
  transaction_body:
    name: transaction_body
    description: Transaction details for update
    in: body
    schema:
      required:
        - user_id
      properties:
        user_id:
          type: integer
        amount:
          type: number
        completed:
          type: boolean
   #     date:
   #       type: string
  t_body:
    name: transaction_body
    description: Save new Transaction into database
    in: body
    schema:
      required:
        - user_id
      properties:
        user_id:
          type: integer
        amount:
          type: number
        completed:
          type: boolean
  p_body:
    name: user_payment_method
    description: Save new Payment Methods into database
    in: body
    schema:
 #     required:
 #       - user_id
      properties:
        type:
          type: string
  #      user_id:
  #        type: integer
        method:
          type: object
